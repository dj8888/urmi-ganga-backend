//import { agentModel } from "../config/db.js"
import { sequelize } from "../config/db.js"; // Import the Sequelize instance

export const getAllAgents = async (req, res) => {
    try {
        const Agents = await sequelize.models.Agent.findAll(); // Access the Agent model through sequelize.models
        return res.status(200).json(Agents);
    } catch (error) {
        console.log(error);
        return res.status(500).json({ "error": "Internal Server Error" })
    }
}


export const addAgent = async (req, res) => {
    try {
        const { firstName, lastName, phoneNumber } = req.body;

        if (!firstName || !lastName || !phoneNumber) {
            return res.status(400).json({ "error": "First name, last name and phone number are required." });
        }
        if (!/^\d{10}$/.test(phoneNumber)) {
            return res.status(400).json({ "error": "Phone number must contain exactly 10 digits." });
        }

        const newAgent = await sequelize.models.Agent.create({
            firstName: firstName,
            lastName: lastName,
            phoneNumber: phoneNumber,
            // The 'code' will be automatically generated by the beforeCreate hook in the model
        });

        return res.status(201).json(newAgent); // Return the newly created agent with status 201 (Created)

    } catch (error) {
        console.error("Error adding agent:", error);
        if (error.name === 'SequelizeValidationError' || error.name === 'SequelizeUniqueConstraintError') {
            return res.status(400).json({ "error": error.errors.map(err => err.message) });
        }
        return res.status(500).json({ "error": "Internal Server Error" });
    }
};

//export const checkPhoneAvailability = async (req, res) => {
//    const { phoneNumber } = req.query;
//    if (!phoneNumber) {
//        return res.status(400).json({ error: "Phone number is required." });
//    }
//    try {
//        const existingAgent = await sequelize.models.Agent.findOne({ where: { phoneNumber } });
//        return res.status(200).json({ exists: !!existingAgent });
//    } catch (error) {
//        console.error("Error checking phone number:", error);
//        return res.status(500).json({ error: "Internal Server Error" });
//    }
//};

export const updateAgent = async (req, res) => {
    const agentId = req.params.agentId;
    if (!req.body.firstName || !req.body.lastName || !req.body.phoneNumber) {
        return res.status(400).json({ "error": "First name, last name and phone number are required." });
    }
    if (!/^\d{10}$/.test(req.body.phoneNumber)) {
        return res.status(400).json({ "error": "Phone number must contain exactly 10 digits." });
    }

    try {
        const [updated] = await sequelize.models.Agent.update(req.body, { where: { agent_id: agentId } }); //return an array with number of rows updated.
        if (updated === 0) return res.status(404).json({ message: "Agent not found" });
        else return res.status(200).json({ message: "updated successfully" });
    } catch (error) {
        console.error("Error updating agent:", error);
        if (error.name === 'SequelizeUniqueConstraintError') {
            return res.status(400).json({ "error": error.errors.map(err => err.message) });
        }
        return res.status(500).json({ "error": "Internal Server Error" });
    }
};

export const deleteAgent = async (req, res) => {
    const agentId = req.params.agentId;
    try {
        const agent = await sequelize.models.Agent.findOne({ where: { agent_id: agentId } });
        if (agent == null) return res.status(404).json({ message: "Agent doesn't exist" });
        await agent.destroy();
        return res.status(200).json({ message: "deleted successfully" });
    } catch (error) {
        console.error("Error deleting agent:", error);
        return res.status(500).json({ "error": "Internal Server Error" });
    }
};

export const getAgentCodesWithNames = async (req, res) => {
    try {
        const agents = await sequelize.models.Agent.findAll({
            attributes: ["code", "firstName", "lastName"], // Fetch only relevant fields
        });

        // Format the data to include "code - full name"
        const formattedAgents = agents.map(agent => {
            return `${agent.code} - ${agent.firstName} ${agent.lastName}`;
        });

        return res.status(200).json(formattedAgents); // Send back the formatted list
    } catch (error) {
        console.error("Error fetching agent codes and names:", error);
        return res.status(500).json({ error: "Internal Server Error" });
    }
};


